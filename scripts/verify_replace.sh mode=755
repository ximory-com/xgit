#!/usr/bin/env bash
set -euo pipefail

root="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$root"

pass() { printf "✔ %s\n" "$*"; }
fail() { printf "✘ %s\n" "$*" >&2; exit 1; }

# 显示摘要（可注释掉）
echo "== Repo =="; pwd; echo
echo "== ls tests/data =="; ls -l tests/data | sed -n '1,200p'; echo

# 1) p2_all_count0: 期望共有 5 个独立的 X
n=$(grep -oE '\bX\b' tests/data/p2_all_count0.txt | wc -l | tr -d ' ')
[[ "$n" == "5" ]] && pass "p2_all_count0: X count == 5" || fail "p2_all_count0: expected 5 X, got $n"

# 2) p2_single_line: 第 2 行应为 'L2: HIT'
l2="$(sed -n '2p' tests/data/p2_single_line.txt)"
[[ "$l2" =~ ^L2:\ *HIT$ ]] && pass "p2_single_line: L2 is HIT" || fail "p2_single_line: got '$l2'"

# 3) p2_inverted_range: alpha/beta/gamma 均存在且各 1
grep -qE '^alpha$' tests/data/p2_inverted_range.txt || fail "p2_inverted_range: missing alpha"
grep -qE '^beta$'  tests/data/p2_inverted_range.txt || fail "p2_inverted_range: missing beta"
grep -qE '^gamma$' tests/data/p2_inverted_range.txt || fail "p2_inverted_range: missing gamma"
pass "p2_inverted_range: alpha/beta/gamma present"

# 4) p2_unicode: 不应再有 foo/FOO；BAR >= 3
! grep -qE '\bfoo\b' tests/data/p2_unicode.txt || fail "p2_unicode: still has foo"
! grep -qE '\bFOO\b' tests/data/p2_unicode.txt || fail "p2_unicode: still has FOO"
nbar=$(grep -oE '\bBAR\b' tests/data/p2_unicode.txt | wc -l | tr -d ' ')
[[ ${nbar:-0} -ge 3 ]] && pass "p2_unicode: BAR count >= 3 (=$nbar)" || fail "p2_unicode: BAR too few ($nbar)"

# 5) p2_capture_move: 三行 key: value
grep -qE '^first_name:\s*River$' tests/data/p2_capture_move.txt || fail "capture: first_name not normalized"
grep -qE '^last_name:\s*Lee$'   tests/data/p2_capture_move.txt || fail "capture: last_name not normalized"
grep -qE '^company:\s*XGit$'    tests/data/p2_capture_move.txt || fail "capture: company not normalized"
pass "p2_capture_move: normalized"

# 6) p2_anchor_range: 第 1 行 NEEDLE
l1="$(sed -n '1p' tests/data/p2_anchor_range.txt)"
[[ "$l1" =~ ^NEEDLE$ ]] && pass "p2_anchor_range: line1 NEEDLE" || fail "p2_anchor_range: line1 != NEEDLE"

# 7) p2_crlf_keep2: 内容 & CRLF
grep -qE '^one$'   tests/data/p2_crlf_keep2.txt || fail "crlf: missing 'one'"
grep -qE '^TWO$'   tests/data/p2_crlf_keep2.txt || fail "crlf: missing 'TWO'"
grep -qE '^three$' tests/data/p2_crlf_keep2.txt || fail "crlf: missing 'three'"
# 检测是否包含 CRLF（有些环境 'file' 不可靠，双保险）
if command -v file >/dev/null 2>&1; then
  if file tests/data/p2_crlf_keep2.txt | grep -qi 'CRLF'; then
    pass "crlf: CRLF detected (file)"
  else
    # 退化到十六进制检查
    if od -An -t x1 tests/data/p2_crlf_keep2.txt | head -n1 | grep -q '0d 0a'; then
      pass "crlf: CRLF detected (od)"
    else
      fail "crlf: not CRLF"
    fi
  fi
else
  if od -An -t x1 tests/data/p2_crlf_keep2.txt | head -n1 | grep -q '0d 0a'; then
    pass "crlf: CRLF detected (od)"
  else
    fail "crlf: not CRLF"
  fi
fi

# 8) p2_oob_start: 应保持原文
[[ "$(cat tests/data/p2_oob_start.txt)" == "only this line" ]] && pass "oob: unchanged" || fail "oob: content changed"

# 9) p2_delete_by_empty_repl: 不应再有 'remove me'；KEEP >= 2
! grep -qE '^remove me$' tests/data/p2_delete_by_empty_repl.txt || fail "delete: still has 'remove me'"
kcnt=$(grep -o 'KEEP' tests/data/p2_delete_by_empty_repl.txt | wc -l | tr -d ' ')
[[ ${kcnt:-0} -ge 2 ]] && pass "delete: KEEP >= 2 (=$kcnt)" || fail "delete: KEEP too few ($kcnt)"

echo
echo "✅ All checks passed."
